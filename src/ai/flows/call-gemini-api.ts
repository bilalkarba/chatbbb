// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow that sends user messages to the Gemini API
 * and returns the AI-generated responses.
 *
 * - callGeminiApi - A function that sends user messages to the Gemini API and returns the AI-generated responses.
 * - CallGeminiApiInput - The input type for the callGeminiApi function.
 * - CallGeminiApiOutput - The return type for the callGeminiApi function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';

const CallGeminiApiInputSchema = z.object({
  message: z.string().describe('The message from the user to be sent to the Gemini API.'),
  fileDataUri: z
    .string()
    .optional()
    .describe(
      "An optional file (e.g., an image) as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type CallGeminiApiInput = z.infer<typeof CallGeminiApiInputSchema>;

const CallGeminiApiOutputSchema = z.object({
  response: z.string().describe('The response from the Gemini API.'),
});
export type CallGeminiApiOutput = z.infer<typeof CallGeminiApiOutputSchema>;

export async function callGeminiApi(input: CallGeminiApiInput): Promise<CallGeminiApiOutput> {
  return callGeminiApiFlow(input);
}

const callGeminiApiPrompt = ai.definePrompt({
  name: 'callGeminiApiPrompt',
  input: { schema: CallGeminiApiInputSchema },
  output: { schema: CallGeminiApiOutputSchema },
  prompt: `Based on the user's message and the provided file (if any), provide a helpful response.
If a file is provided, analyze its content.

User message: {{{message}}}

{{#if fileDataUri}}
File content:
{{media url=fileDataUri}}
{{/if}}
`,
});

const callGeminiApiFlow = ai.defineFlow(
  {
    name: 'callGeminiApiFlow',
    inputSchema: CallGeminiApiInputSchema,
    outputSchema: CallGeminiApiOutputSchema,
  },
  async input => {
    const { output } = await callGeminiApiPrompt(input);
    return output!;
  }
);
